Dim SapGuiAuto, application, connection, session

If Not IsObject(SapGuiAuto) Then
    Set SapGuiAuto = GetObject("SAPGUI")
End If

If Not IsObject(application) Then
    Set application = SapGuiAuto.GetScriptingEngine
End If

If Not IsObject(connection) Then
    Set connection = application.Children(0)
End If

If Not IsObject(session) Then
    Set session = connection.Children(0)
End If

If IsObject(WScript) Then
    WScript.ConnectObject session, "on"
    WScript.ConnectObject application, "on"
End If


' Maximiser la fenêtre
session.findById("wnd[0]").maximize
If session.children.count > 1 Then
    session.findById("wnd[1]/usr/radMULTI_LOGON_OPT2").select
    session.findById("wnd[1]/usr/radMULTI_LOGON_OPT2").setFocus
    session.findById("wnd[1]/tbar[0]/btn[0]").press
End If

' Préparer la date pour le nom de fichier
Dim xlapp, crnt_yr, crnt_day, crnt_mnth
crnt_yr = Year(Now)
If Day(Now) > 9 Then
    crnt_day = Day(Now)
Else
    crnt_day = "0" & Day(Now)
End If
If Month(Now) > 9 Then
    crnt_mnth = Month(Now)
Else
    crnt_mnth = "0" & Month(Now)
End If

' Extraire et exporter les données
On Error Resume Next
Set xlapp = GetObject(, "Excel.Application")
n = xlapp.Worksheets.Count
xlapp.Application.DisplayAlerts = False
xlapp.Worksheets(n).SaveAs("G:\Drive\..\Test_" & crnt_yr & "_" & crnt_mnth & "_" & crnt_day & ".xlsx")
While xlapp.Worksheets.Count <> n
    Wend
session.findById("wnd[1]/tbar[0]/btn[0]").press
On Error GoTo 0

' Fermer la transaction
session.findById("wnd[0]/tbar[0]/okcd").text = "/n"
session.findById("wnd[0]").sendVKey 0
Wscript.Sleep 2000
session.findById("wnd[0]").sendVKey 15


' Ajout du code pour gérer les messages d'erreur
Dim errorMessage, hasError, errorWindow
hasError = False ' initialiser la variable à False

' Boucle pour gérer les messages d'erreur automatiquement
Do
    ' Vérifier si un message d'erreur est affiché
    On Error Resume Next
    Set errorMessage = session.findById("wnd[0]/sbar")
    Set errorWindow = session.findById("wnd[1]")
    On Error GoTo 0

    If errorMessage.MessageType = "E" Or (Not errorWindow Is Nothing) Then
        ' Cliquer sur le bouton "OK" du message d'erreur
        On Error Resume Next
        session.findById("wnd[1]/tbar[0]/btn[0]").press
        On Error GoTo 0

        ' Forcer la fermeture de l'application SAP
        Dim objShell
        Set objShell = CreateObject("WScript.Shell")
        objShell.Run "taskkill /F /IM saplogon.exe", 0, True
        Set objShell = Nothing

        hasError = True ' définir la variable à True si une erreur est trouvée
    End If

    ' Attendre avant de vérifier à nouveau les messages d'erreur
    WScript.Sleep 1000
Loop While hasError ' continuer la boucle tant qu'une erreur est trouvée

Dim objShell, objExec, sapClosed

sapClosed = False

Set objShell = CreateObject("WScript.Shell")

' Exécuter le script principal
Set objExec = objShell.Exec("wscript MainScript.vbs")

' Surveiller le script principal pour détecter les erreurs
Do While objExec.Status = 0
    WScript.Sleep 1000
Loop

' Si une erreur se produit, fermer SAP
If objExec.ExitCode <> 0 Then
    objShell.Run "taskkill /F /IM saplogon.exe", 0, True
    sapClosed = True
End If

Set objExec = Nothing
Set objShell = Nothing

' Afficher un message si SAP a été fermé en raison d'une erreur
If sapClosed Then
    MsgBox "SAP a été fermé en raison d'une erreur dans le script."
End If



' Script de surveillance (Monitor.vbs)
' Script de surveillance (Monitor.vbs)
Dim objShell, objExec, sapClosed, inactivityCounter, timeout, checkInterval, sapLogonPath

sapClosed = False
inactivityCounter = 0
timeout = 300000 ' Temps d'inactivité en millisecondes (5 minutes dans cet exemple)
checkInterval = 1000 ' Intervalle de vérification en millisecondes (1 seconde dans cet exemple)
sapLogonPath = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe" ' Chemin d'accès à SAP Logon (adaptez-le à votre installation)

Set objShell = CreateObject("WScript.Shell")

' Exécuter le script principal
Set objExec = objShell.Exec("wscript MainScript.vbs")

' Surveiller le script principal pour détecter les erreurs et vérifier l'inactivité
Do
    If objExec.Status = 0 Then
        inactivityCounter = inactivityCounter + checkInterval
        If inactivityCounter >= timeout Then
            objShell.Run "taskkill /F /IM saplogon.exe", 0, True
            sapClosed = True
            Exit Do
        End If
        WScript.Sleep checkInterval
    Else
        Exit Do
    End If
Loop

' Si une erreur se produit, fermer SAP
If objExec.ExitCode <> 0 Then
    objShell.Run "taskkill /F /IM saplogon.exe", 0, True
    sapClosed = True
End If

' Rouvrir SAP si nécessaire
If sapClosed Then
    objShell.Exec """" & sapLogonPath & """"
End If

Set objExec = Nothing
Set objShell = Nothing

' Afficher un message si SAP a été fermé en raison d'une erreur ou d'un temps d'inactivité dépassé
If sapClosed Then
    MsgBox "SAP a été fermé en raison d'une erreur dans le script ou d'un temps d'inactivité dépassé et a été rouvert."
End If
