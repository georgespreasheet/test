' Script de surveillance (Monitor.vbs)
Dim objShell, objExec, sapClosed, inactivityCounter, timeout, checkInterval, sapLogonPath, retryAttempts, i, exitForInactivity
Dim logFilePath, emailRecipients

Sub SAPConnect()
    ' ... (SAPConnect code)
End Sub

Sub RunSubVBS(SubPath)
    ' ... (RunSubVBS code)
End Sub

' Ajoutez une fonction pour écrire dans un fichier journal (log)
Sub WriteToLog(message)
    Dim fso, logFile, logFilePath

    logFilePath = "C:\Chemin\vers\le\dossier\logfile.txt" ' Spécifiez le chemin du fichier de journalisation

    Set fso = CreateObject("Scripting.FileSystemObject")
    If fso.FileExists(logFilePath) Then
        Set logFile = fso.OpenTextFile(logFilePath, 8, True) ' Ouvrir le fichier en mode Append (8)
    Else
        Set logFile = fso.CreateTextFile(logFilePath, True) ' Créer le fichier s'il n'existe pas
    End If

    logFile.WriteLine Now & " - " & message ' Écrire le message avec un horodatage
    logFile.Close ' Fermer le fichier

    Set logFile = Nothing
    Set fso = Nothing
End Sub

' Ajoutez une fonction pour envoyer des e-mails en cas d'erreur
Sub SendEmail(subject, body)
    ' ... (fonction SendEmail)
End Sub

sapClosed = False
timeout = 15000 ' Temps d'inactivité en millisecondes (15 secondes dans cet exemple)
checkInterval = 1000 ' Intervalle de vérification en millisecondes (1 seconde dans cet exemple)
sapLogonPath = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe" ' Chemin d'accès à SAP Logon (adaptez-le à votre installation)
retryAttempts = 2 ' Nombre de tentatives (2 tentatives dans cet exemple, dont la première)
logFilePath = "C:\Chemin\vers\le\dossier\Log.txt" ' Chemin du fichier de journal
emailRecipients = "votre@email.com" ' Destinataires des e-mails de notification

Set objShell = CreateObject("WScript.Shell")

For i = 1 To retryAttempts
    exitForInactivity = False

    ' Ouvrir SAP si nécessaire
    If sapClosed Then
        objShell.Exec """" & sapLogonPath & """"
        WScript.Sleep 5000 ' Attendre que SAP s'ouvre (ajustez le temps d'attente si nécessaire)
        SAPConnect()
        sapClosed = False
    End If

    ' Exécuter le script principal
    On Error Resume Next
    Set objExec = objShell.Exec("wscript ne2.vbs")
    On Error GoTo 0

    ' Surveiller le script principal pour détecter les erreurs et vérifier l'inactivité
    inactivityCounter = 0
    Do
        If objExec.Status = 0 Then
            inactivityCounter = inactivityCounter + checkInterval
            If inactivityCounter >= timeout Then
                objShell.Run ("taskkill /F /IM saplogon.exe")
                Set objKillMainScript = objShell.Exec("taskkill /F /PID " & objExec.ProcessID)
                sapClosed = True
                exitForInactivity = True
                Exit Do
            End If
            WScript.Sleep checkInterval
        Else
            Exit Do
        End If
    Loop

    ' Si une erreur se produit ou si le script s'est terminé en raison de l'inactivité, relancer la tentative
    If objExec.ExitCode <> 0 Or exitForInactivity Then
        If i < retryAttempts Then
            WriteToLog "Erreur ou inactivité détectée, nouvelle tentative : " & i
            sapClosed = True
        Else
            WriteToLog "Échec après " & retryAttempts & " tentatives. Envoi d'une notification par e-mail."
            SendEmail "Erreur d'extraction", "L'extraction a échoué après " & retryAttempts & " tentatives. Veuillez vérifier le système."
            objShell.Run ("taskkill /F /IM wscript.exe")
            Exit For
        End If
    Else
        WriteToLog "Extraction réussie. Lancement du script dd.vbs."
        objShell.Run "wscript.exe ""C:\Chemin\vers\le\dossier\dd.vbs"""
        Exit For
    End If
Next

' Fermer Excel en arrière-plan
objShell.Run "taskkill /F /IM excel.exe", , True

Set objExec = Nothing
Set objShell = Nothing


//////////////

Set objShell = CreateObject("WScript.Shell")

For i = 1 To retryAttempts
    exitForInactivity = False

    ' Ouvrir SAP si nécessaire
    If sapClosed Then
        objShell.Exec """" & sapLogonPath & """"
        WScript.Sleep 5000 ' Attendre que SAP s'ouvre (ajustez le temps d'attente si nécessaire)
        SAPConnect()
        sapClosed = False
    End If

    ' Exécuter le script principal
    On Error Resume Next
    exitCode = objShell.Run("wscript ""ne2.vbs""", , True)
    On Error GoTo 0

    ' Surveiller le script principal pour détecter les erreurs et vérifier l'inactivité
    inactivityCounter = 0
    Do
        If exitCode = 259 Then ' 259 signifie que le processus est en cours d'exécution
            inactivityCounter = inactivityCounter + checkInterval
            If inactivityCounter >= timeout Then
                objShell.Run ("taskkill /F /IM saplogon.exe")
                objShell.Run ("taskkill /F /IM wscript.exe /FI ""WindowTitle eq ne2.vbs""", , True)
                sapClosed = True
                exitForInactivity = True
                Exit Do
            End If
            WScript.Sleep checkInterval
        Else
            Exit Do
        End If
    Loop

    ' Si une erreur se produit ou si le script s'est terminé en raison de l'inactivité, relancer la tentative
    If exitCode <> 0 Or exitForInactivity Then
        If i < retryAttempts Then
            WriteToLog "Erreur ou inactivité détectée, nouvelle tentative : " & i
            sapClosed = True
        Else
            WriteToLog "Échec après " & retryAttempts & " tentatives. Envoi d'une notification par e-mail."
            SendEmail "Erreur d'extraction", "L'extraction a échoué après " & retryAttempts & " tentatives. Veuillez vérifier le système."
            objShell.Run ("taskkill /F /IM wscript.exe")
            Exit For
        End If
    Else
        WriteToLog "Extraction réussie. Lancement du script dd.vbs."
        objShell.Run "wscript.exe ""C:\Chemin\vers\le\dossier\dd.vbs"""
        Exit For
    End If
Next
